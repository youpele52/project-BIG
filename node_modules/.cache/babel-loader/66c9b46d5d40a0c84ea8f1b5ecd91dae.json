{"ast":null,"code":"\"use strict\"; // Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.call = void 0;\n\nconst fs = require(\"fs\");\n\nconst is = require(\"is\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst gax = require(\"google-gax\"); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _requestToObject = request => {\n  if (is.string(request)) {\n    // Is this a URL or a local file?\n    // Guess based on what the string looks like, and build the full\n    // request object in the correct format.\n    if (request.indexOf('://') === -1 || request.indexOf('file://') === 0) {\n      request = {\n        image: {\n          source: {\n            filename: request\n          }\n        }\n      };\n    } else {\n      request = {\n        image: {\n          source: {\n            imageUri: request\n          }\n        }\n      };\n    }\n  } else if (Buffer.isBuffer(request)) {\n    // Drop the buffer one level lower; it will get dealt with later\n    // in the function. This allows sending <Buffer> and {image: <Buffer>} to\n    // both work identically.\n    request = {\n      image: request\n    };\n  }\n\n  return request;\n};\n\nconst _coerceRequest = (request, callback) => {\n  // At this point, request must be an object with an `image` key; if not,\n  // it is an error. If there is no image, throw an exception.\n  if (!is.object(request) || is.undefined(request.image)) {\n    return callback(new Error('No image present.'));\n  } // If this is a buffer, read it and send the object\n  // that the Vision API expects.\n\n\n  if (Buffer.isBuffer(request.image)) {\n    request.image = {\n      content: request.image.toString('base64')\n    };\n  } // If the file is specified as a filename and exists on disk, read it\n  // and coerce it into the base64 content.\n\n\n  if (request.image.source && request.image.source.filename) {\n    fs.readFile(request.image.source.filename, (err, blob) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      request.image.content = blob.toString('base64');\n      delete request.image.source;\n      return callback(null, request);\n    });\n  } else {\n    return callback(null, request);\n  }\n};\n\nconst _createSingleFeatureMethod = featureValue => {\n  return function (request, callOptionsOrCallback, callback) {\n    // confidence check: If we got a string or buffer, we need this to be\n    // in object form now, so we can tack on the features list.\n    //\n    // Do the minimum required conversion, which can also be guaranteed to\n    // be synchronous (e.g. no file loading yet; that is handled by\n    // annotateImage later.\n    const annotateImageRequest = _requestToObject(request); // If a callback was provided and options were skipped, normalize\n    // the argument names.\n\n\n    let callOptions;\n\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    } // Add the feature to the request.\n\n\n    annotateImageRequest.features = annotateImageRequest.features || [{\n      type: featureValue\n    }]; // If the user submitted explicit features that do not line up with\n    // the precise method called, throw an exception.\n\n    for (const feature of annotateImageRequest.features) {\n      if (feature.type !== featureValue) {\n        throw new Error('Setting explicit features is not supported on this method. ' + 'Use the #annotateImage method instead.');\n      }\n    } // Call the underlying #annotateImage method.\n\n\n    return this.annotateImage(annotateImageRequest, callOptions, callback);\n  };\n};\n\nfunction call(apiVersion) {\n  const methods = {};\n  /**\n   * Annotate a single image with the requested features.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#annotateImage\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object[]} request.features An array of the specific annotation\n   *     features being requested. This should take a form such as:\n   *\n   *         [{type: vision.types.Feature.Type.FACE_DETECTION},\n   *         {type: vision.types.Feature.Type.WEB_DETECTION}]\n   *\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n   *   features: [],\n   * };\n   * client\n   *   .annotateImage(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.annotateImage = promisify_1.promisify(function (request, callOptionsOrCallback, callback) {\n    // If a callback was provided and options were skipped, normalize\n    // the argument names.\n    let callOptions;\n\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    } // If we got a filename for the image, open the file and transform\n    // it to content.\n\n\n    return _coerceRequest(request, (err, req) => {\n      if (err) {\n        return callback(err);\n      } // Call the GAPIC batch annotation function.\n\n\n      const requests = {\n        requests: [req]\n      };\n      return this.batchAnnotateImages(requests, callOptions, (err, r) => {\n        // If there is an error, handle it.\n        if (err) {\n          return callback(err);\n        } // We are guaranteed to only have one response element, since we\n        // only sent one image.\n\n\n        const response = r.responses[0]; // Fire the callback if applicable.\n\n        return callback(undefined, response);\n      });\n    });\n  });\n  const protoFilesRoot = gax.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('../protos/protos.json'));\n  const features = protoFilesRoot.lookup(`google.cloud.vision.${apiVersion}.Feature.Type`).values;\n  /**\n   * Annotate a single image with face detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#faceDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .faceDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.faceDetection = promisify_1.promisify(_createSingleFeatureMethod(features.FACE_DETECTION));\n  /**\n   * Annotate a single image with landmark detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#landmarkDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .landmarkDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.landmarkDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LANDMARK_DETECTION));\n  /**\n   * Annotate a single image with logo detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#logoDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .logoDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.logoDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LOGO_DETECTION));\n  /**\n   * Annotate a single image with label detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#labelDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .labelDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.labelDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LABEL_DETECTION));\n  /**\n   * Annotate a single image with text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#textDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .textDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.textDetection = promisify_1.promisify(_createSingleFeatureMethod(features.TEXT_DETECTION));\n  /**\n   * Annotate a single image with document text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#documentTextDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .documentTextDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.documentTextDetection = promisify_1.promisify(_createSingleFeatureMethod(features.DOCUMENT_TEXT_DETECTION));\n  /**\n   * Annotate a single image with safe search detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#safeSearchDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .safeSearchDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.safeSearchDetection = promisify_1.promisify(_createSingleFeatureMethod(features.SAFE_SEARCH_DETECTION));\n  /**\n   * Annotate a single image with image properties.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#imageProperties\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .imageProperties(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.imageProperties = promisify_1.promisify(_createSingleFeatureMethod(features.IMAGE_PROPERTIES));\n  /**\n   * Annotate a single image with crop hints.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#cropHints\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .cropHints(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.cropHints = promisify_1.promisify(_createSingleFeatureMethod(features.CROP_HINTS));\n  /**\n   * Annotate a single image with web detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#webDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .webDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  methods.webDetection = promisify_1.promisify(_createSingleFeatureMethod(features.WEB_DETECTION));\n  /**\n   * Annotate a single image with the result from Product Search.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#productSearch\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1p3beta1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .productSearch(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n  if (features.PRODUCT_SEARCH !== undefined) {\n    methods.productSearch = promisify_1.promisify(_createSingleFeatureMethod(features.PRODUCT_SEARCH));\n  }\n  /**\n   * Annotate a single image with localization vectors.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#objectLocalization\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be a Buffer.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * // Object localization is only available in v1p3beta1.\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .objectLocalization(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  if (features.OBJECT_LOCALIZATION !== undefined) {\n    methods.objectLocalization = promisify_1.promisify(_createSingleFeatureMethod(features.OBJECT_LOCALIZATION));\n  }\n\n  return methods;\n}\n\nexports.call = call;","map":{"version":3,"sources":["../../src/helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.call = void 0;\nconst fs = require(\"fs\");\nconst is = require(\"is\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _requestToObject = (request) => {\n    if (is.string(request)) {\n        // Is this a URL or a local file?\n        // Guess based on what the string looks like, and build the full\n        // request object in the correct format.\n        if (request.indexOf('://') === -1 || request.indexOf('file://') === 0) {\n            request = {\n                image: { source: { filename: request } },\n            };\n        }\n        else {\n            request = {\n                image: { source: { imageUri: request } },\n            };\n        }\n    }\n    else if (Buffer.isBuffer(request)) {\n        // Drop the buffer one level lower; it will get dealt with later\n        // in the function. This allows sending <Buffer> and {image: <Buffer>} to\n        // both work identically.\n        request = { image: request };\n    }\n    return request;\n};\nconst _coerceRequest = (request, callback) => {\n    // At this point, request must be an object with an `image` key; if not,\n    // it is an error. If there is no image, throw an exception.\n    if (!is.object(request) || is.undefined(request.image)) {\n        return callback(new Error('No image present.'));\n    }\n    // If this is a buffer, read it and send the object\n    // that the Vision API expects.\n    if (Buffer.isBuffer(request.image)) {\n        request.image = { content: request.image.toString('base64') };\n    }\n    // If the file is specified as a filename and exists on disk, read it\n    // and coerce it into the base64 content.\n    if (request.image.source && request.image.source.filename) {\n        fs.readFile(request.image.source.filename, (err, blob) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            request.image.content = blob.toString('base64');\n            delete request.image.source;\n            return callback(null, request);\n        });\n    }\n    else {\n        return callback(null, request);\n    }\n};\nconst _createSingleFeatureMethod = (featureValue) => {\n    return function (request, callOptionsOrCallback, callback) {\n        // confidence check: If we got a string or buffer, we need this to be\n        // in object form now, so we can tack on the features list.\n        //\n        // Do the minimum required conversion, which can also be guaranteed to\n        // be synchronous (e.g. no file loading yet; that is handled by\n        // annotateImage later.\n        const annotateImageRequest = _requestToObject(request);\n        // If a callback was provided and options were skipped, normalize\n        // the argument names.\n        let callOptions;\n        if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n            callback = callOptionsOrCallback;\n            callOptions = undefined;\n        }\n        else {\n            callOptions = callOptionsOrCallback;\n        }\n        // Add the feature to the request.\n        annotateImageRequest.features = annotateImageRequest.features || [\n            {\n                type: featureValue,\n            },\n        ];\n        // If the user submitted explicit features that do not line up with\n        // the precise method called, throw an exception.\n        for (const feature of annotateImageRequest.features) {\n            if (feature.type !== featureValue) {\n                throw new Error('Setting explicit features is not supported on this method. ' +\n                    'Use the #annotateImage method instead.');\n            }\n        }\n        // Call the underlying #annotateImage method.\n        return this.annotateImage(annotateImageRequest, callOptions, callback);\n    };\n};\nfunction call(apiVersion) {\n    const methods = {};\n    /**\n     * Annotate a single image with the requested features.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#annotateImage\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object[]} request.features An array of the specific annotation\n     *     features being requested. This should take a form such as:\n     *\n     *         [{type: vision.types.Feature.Type.FACE_DETECTION},\n     *         {type: vision.types.Feature.Type.WEB_DETECTION}]\n     *\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n     *   features: [],\n     * };\n     * client\n     *   .annotateImage(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.annotateImage = promisify_1.promisify(function (request, callOptionsOrCallback, callback) {\n        // If a callback was provided and options were skipped, normalize\n        // the argument names.\n        let callOptions;\n        if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n            callback = callOptionsOrCallback;\n            callOptions = undefined;\n        }\n        else {\n            callOptions = callOptionsOrCallback;\n        }\n        // If we got a filename for the image, open the file and transform\n        // it to content.\n        return _coerceRequest(request, (err, req) => {\n            if (err) {\n                return callback(err);\n            }\n            // Call the GAPIC batch annotation function.\n            const requests = { requests: [req] };\n            return this.batchAnnotateImages(requests, callOptions, (err, r) => {\n                // If there is an error, handle it.\n                if (err) {\n                    return callback(err);\n                }\n                // We are guaranteed to only have one response element, since we\n                // only sent one image.\n                const response = r.responses[0];\n                // Fire the callback if applicable.\n                return callback(undefined, response);\n            });\n        });\n    });\n    const protoFilesRoot = gax.protobuf.Root.fromJSON(\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../protos/protos.json'));\n    const features = protoFilesRoot.lookup(`google.cloud.vision.${apiVersion}.Feature.Type`).values;\n    /**\n     * Annotate a single image with face detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#faceDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .faceDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.faceDetection = promisify_1.promisify(_createSingleFeatureMethod(features.FACE_DETECTION));\n    /**\n     * Annotate a single image with landmark detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#landmarkDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .landmarkDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.landmarkDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LANDMARK_DETECTION));\n    /**\n     * Annotate a single image with logo detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#logoDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .logoDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.logoDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LOGO_DETECTION));\n    /**\n     * Annotate a single image with label detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#labelDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .labelDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.labelDetection = promisify_1.promisify(_createSingleFeatureMethod(features.LABEL_DETECTION));\n    /**\n     * Annotate a single image with text detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#textDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .textDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.textDetection = promisify_1.promisify(_createSingleFeatureMethod(features.TEXT_DETECTION));\n    /**\n     * Annotate a single image with document text detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#documentTextDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .documentTextDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.documentTextDetection = promisify_1.promisify(_createSingleFeatureMethod(features.DOCUMENT_TEXT_DETECTION));\n    /**\n     * Annotate a single image with safe search detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#safeSearchDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .safeSearchDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.safeSearchDetection = promisify_1.promisify(_createSingleFeatureMethod(features.SAFE_SEARCH_DETECTION));\n    /**\n     * Annotate a single image with image properties.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#imageProperties\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .imageProperties(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.imageProperties = promisify_1.promisify(_createSingleFeatureMethod(features.IMAGE_PROPERTIES));\n    /**\n     * Annotate a single image with crop hints.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#cropHints\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .cropHints(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.cropHints = promisify_1.promisify(_createSingleFeatureMethod(features.CROP_HINTS));\n    /**\n     * Annotate a single image with web detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#webDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .webDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.webDetection = promisify_1.promisify(_createSingleFeatureMethod(features.WEB_DETECTION));\n    /**\n     * Annotate a single image with the result from Product Search.\n     *\n     * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n     *\n     * @method v1p3beta1.ImageAnnotatorClient#productSearch\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1p3beta1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision').v1p3beta1;\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .productSearch(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    if (features.PRODUCT_SEARCH !== undefined) {\n        methods.productSearch = promisify_1.promisify(_createSingleFeatureMethod(features.PRODUCT_SEARCH));\n    }\n    /**\n     * Annotate a single image with localization vectors.\n     *\n     * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n     *\n     * @method v1p3beta1.ImageAnnotatorClient#objectLocalization\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be a Buffer.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * // Object localization is only available in v1p3beta1.\n     * const vision = require('@google-cloud/vision').v1p3beta1;\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .objectLocalization(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    if (features.OBJECT_LOCALIZATION !== undefined) {\n        methods.objectLocalization = promisify_1.promisify(_createSingleFeatureMethod(features.OBJECT_LOCALIZATION));\n    }\n    return methods;\n}\nexports.call = call;\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}