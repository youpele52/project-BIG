{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProductSearchClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p4beta1/product_search_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./product_search_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Manages Products and ProductSets of reference images for use in product\n *  search. It uses the following resource model:\n *\n *  - The API has a collection of\n *  {@link google.cloud.vision.v1p4beta1.ProductSet|ProductSet} resources, named\n *  `projects/* /locations/* /productSets/*`, which acts as a way to put different\n *  products into groups to limit identification.\n *\n *  In parallel,\n *\n *  - The API has a collection of\n *  {@link google.cloud.vision.v1p4beta1.Product|Product} resources, named\n *    `projects/* /locations/* /products/*`\n *\n *  - Each {@link google.cloud.vision.v1p4beta1.Product|Product} has a collection of\n *  {@link google.cloud.vision.v1p4beta1.ReferenceImage|ReferenceImage} resources,\n *  named\n *    `projects/* /locations/* /products/* /referenceImages/*`\n * @class\n * @memberof v1p4beta1\n */\n\n\nclass ProductSearchClient {\n  /**\n   * Construct an instance of ProductSearchClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n      productPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}'),\n      productSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/productSets/{product_set}'),\n      referenceImagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listProductSets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'productSets'),\n      listProducts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products'),\n      listReferenceImages: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'referenceImages'),\n      listProductsInProductSet: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const importProductSetsResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.ImportProductSetsResponse');\n    const importProductSetsMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.BatchOperationMetadata');\n    const purgeProductsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    const purgeProductsMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.BatchOperationMetadata');\n    this.descriptors.longrunning = {\n      importProductSets: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importProductSetsResponse.decode.bind(importProductSetsResponse), importProductSetsMetadata.decode.bind(importProductSetsMetadata)),\n      purgeProducts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, purgeProductsResponse.decode.bind(purgeProductsResponse), purgeProductsMetadata.decode.bind(purgeProductsMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p4beta1.ProductSearch', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.productSearchStub) {\n      return this.productSearchStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.vision.v1p4beta1.ProductSearch.\n\n\n    this.productSearchStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.vision.v1p4beta1.ProductSearch') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.vision.v1p4beta1.ProductSearch, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const productSearchStubMethods = ['createProductSet', 'listProductSets', 'getProductSet', 'updateProductSet', 'deleteProductSet', 'createProduct', 'listProducts', 'getProduct', 'updateProduct', 'deleteProduct', 'createReferenceImage', 'deleteReferenceImage', 'listReferenceImages', 'getReferenceImage', 'addProductToProductSet', 'removeProductFromProductSet', 'listProductsInProductSet', 'importProductSets', 'purgeProducts'];\n\n    for (const methodName of productSearchStubMethods) {\n      const callPromise = this.productSearchStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.productSearchStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-vision'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Creates and returns a new ProductSet resource.\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if display_name is missing, or is longer than\n   *   4096 characters.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project in which the ProductSet should be created.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet\n   *   Required. The ProductSet to create.\n   * @param {string} request.productSetId\n   *   A user-supplied resource id for this ProductSet. If set, the server will\n   *   attempt to use this value as the resource id. If it is already in use, an\n   *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters\n   *   long. It cannot contain the character `/`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createProductSet(request);\n   */\n\n\n  createProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createProductSet(request, options, callback);\n  }\n  /**\n   * Gets information associated with a ProductSet.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the ProductSet does not exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Resource name of the ProductSet to get.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getProductSet(request);\n   */\n\n\n  getProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getProductSet(request, options, callback);\n  }\n  /**\n   * Makes changes to a ProductSet resource.\n   * Only display_name can be updated currently.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the ProductSet does not exist.\n   * * Returns INVALID_ARGUMENT if display_name is present in update_mask but\n   *   missing from the request or longer than 4096 characters.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet\n   *   Required. The ProductSet resource which replaces the one on the server.\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields to\n   *   update.\n   *   If update_mask isn't specified, all mutable fields are to be updated.\n   *   Valid mask path is `display_name`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateProductSet(request);\n   */\n\n\n  updateProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'product_set.name': request.productSet.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateProductSet(request, options, callback);\n  }\n  /**\n   * Permanently deletes a ProductSet. Products and ReferenceImages in the\n   * ProductSet are not deleted.\n   *\n   * The actual image files are not deleted from Google Cloud Storage.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Resource name of the ProductSet to delete.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteProductSet(request);\n   */\n\n\n  deleteProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteProductSet(request, options, callback);\n  }\n  /**\n   * Creates and returns a new product resource.\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096\n   *   characters.\n   * * Returns INVALID_ARGUMENT if description is longer than 4096 characters.\n   * * Returns INVALID_ARGUMENT if product_category is missing or invalid.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project in which the Product should be created.\n   *\n   *   Format is\n   *   `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {google.cloud.vision.v1p4beta1.Product} request.product\n   *   Required. The product to create.\n   * @param {string} request.productId\n   *   A user-supplied resource id for this Product. If set, the server will\n   *   attempt to use this value as the resource id. If it is already in use, an\n   *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters\n   *   long. It cannot contain the character `/`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createProduct(request);\n   */\n\n\n  createProduct(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createProduct(request, options, callback);\n  }\n  /**\n   * Gets information associated with a Product.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the Product does not exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Resource name of the Product to get.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getProduct(request);\n   */\n\n\n  getProduct(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getProduct(request, options, callback);\n  }\n  /**\n   * Makes changes to a Product resource.\n   * Only the `display_name`, `description`, and `labels` fields can be updated\n   * right now.\n   *\n   * If labels are updated, the change will not be reflected in queries until\n   * the next index time.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the Product does not exist.\n   * * Returns INVALID_ARGUMENT if display_name is present in update_mask but is\n   *   missing from the request or longer than 4096 characters.\n   * * Returns INVALID_ARGUMENT if description is present in update_mask but is\n   *   longer than 4096 characters.\n   * * Returns INVALID_ARGUMENT if product_category is present in update_mask.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.vision.v1p4beta1.Product} request.product\n   *   Required. The Product resource which replaces the one on the server.\n   *   product.name is immutable.\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields\n   *   to update.\n   *   If update_mask isn't specified, all mutable fields are to be updated.\n   *   Valid mask paths include `product_labels`, `display_name`, and\n   *   `description`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateProduct(request);\n   */\n\n\n  updateProduct(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'product.name': request.product.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateProduct(request, options, callback);\n  }\n  /**\n   * Permanently deletes a product and its reference images.\n   *\n   * Metadata of the product and all its images will be deleted right away, but\n   * search queries against ProductSets containing the product may still work\n   * until all related caches are refreshed.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. Resource name of product to delete.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteProduct(request);\n   */\n\n\n  deleteProduct(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteProduct(request, options, callback);\n  }\n  /**\n   * Creates and returns a new ReferenceImage resource.\n   *\n   * The `bounding_poly` field is optional. If `bounding_poly` is not specified,\n   * the system will try to detect regions of interest in the image that are\n   * compatible with the product_category on the parent product. If it is\n   * specified, detection is ALWAYS skipped. The system converts polygons into\n   * non-rotated rectangles.\n   *\n   * Note that the pipeline will resize the image if the image resolution is too\n   * large to process (above 50MP).\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096\n   *   characters.\n   * * Returns INVALID_ARGUMENT if the product does not exist.\n   * * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing\n   *   compatible with the parent product's product_category is detected.\n   * * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Resource name of the product in which to create the reference\n   *   image.\n   *\n   *   Format is\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n   * @param {google.cloud.vision.v1p4beta1.ReferenceImage} request.referenceImage\n   *   Required. The reference image to create.\n   *   If an image ID is specified, it is ignored.\n   * @param {string} request.referenceImageId\n   *   A user-supplied resource id for the ReferenceImage to be added. If set,\n   *   the server will attempt to use this value as the resource id. If it is\n   *   already in use, an error is returned with code ALREADY_EXISTS. Must be at\n   *   most 128 characters long. It cannot contain the character `/`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createReferenceImage(request);\n   */\n\n\n  createReferenceImage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createReferenceImage(request, options, callback);\n  }\n  /**\n   * Permanently deletes a reference image.\n   *\n   * The image metadata will be deleted right away, but search queries\n   * against ProductSets containing the image may still work until all related\n   * caches are refreshed.\n   *\n   * The actual image files are not deleted from Google Cloud Storage.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the reference image to delete.\n   *\n   *   Format is:\n   *\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteReferenceImage(request);\n   */\n\n\n  deleteReferenceImage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteReferenceImage(request, options, callback);\n  }\n  /**\n   * Gets information associated with a ReferenceImage.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the specified image does not exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the ReferenceImage to get.\n   *\n   *   Format is:\n   *\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getReferenceImage(request);\n   */\n\n\n  getReferenceImage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getReferenceImage(request, options, callback);\n  }\n  /**\n   * Adds a Product to the specified ProductSet. If the Product is already\n   * present, no change is made.\n   *\n   * One Product can be added to at most 100 ProductSets.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name for the ProductSet to modify.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {string} request.product\n   *   Required. The resource name for the Product to be added to this ProductSet.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.addProductToProductSet(request);\n   */\n\n\n  addProductToProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.addProductToProductSet(request, options, callback);\n  }\n  /**\n   * Removes a Product from the specified ProductSet.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name for the ProductSet to modify.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {string} request.product\n   *   Required. The resource name for the Product to be removed from this\n   *   ProductSet.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.removeProductFromProductSet(request);\n   */\n\n\n  removeProductFromProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.removeProductFromProductSet(request, options, callback);\n  }\n  /**\n   * Asynchronous API that imports a list of reference images to specified\n   * product sets based on a list of image information.\n   *\n   * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be\n   * used to keep track of the progress and results of the request.\n   * `Operation.metadata` contains `BatchOperationMetadata`. (progress)\n   * `Operation.response` contains `ImportProductSetsResponse`. (results)\n   *\n   * The input source of this method is a csv file on Google Cloud Storage.\n   * For the format of the csv file please see\n   * {@link google.cloud.vision.v1p4beta1.ImportProductSetsGcsSource.csv_file_uri|ImportProductSetsGcsSource.csv_file_uri}.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project in which the ProductSets should be imported.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {google.cloud.vision.v1p4beta1.ImportProductSetsInputConfig} request.inputConfig\n   *   Required. The input content for the list of requests.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.importProductSets(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  importProductSets(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.importProductSets(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `importProductSets()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkImportProductSetsProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkImportProductSetsProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importProductSets, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Asynchronous API to delete all Products in a ProductSet or all Products\n   * that are in no ProductSet.\n   *\n   * If a Product is a member of the specified ProductSet in addition to other\n   * ProductSets, the Product will still be deleted.\n   *\n   * It is recommended to not delete the specified ProductSet until after this\n   * operation has completed. It is also recommended to not add any of the\n   * Products involved in the batch delete to a new ProductSet while this\n   * operation is running because those Products may still end up deleted.\n   *\n   * It's not possible to undo the PurgeProducts operation. Therefore, it is\n   * recommended to keep the csv files used in ImportProductSets (if that was\n   * how you originally built the Product Set) before starting PurgeProducts, in\n   * case you need to re-import the data after deletion.\n   *\n   * If the plan is to purge all of the Products from a ProductSet and then\n   * re-use the empty ProductSet to re-import new Products into the empty\n   * ProductSet, you must wait until the PurgeProducts operation has finished\n   * for that ProductSet.\n   *\n   * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be\n   * used to keep track of the progress and results of the request.\n   * `Operation.metadata` contains `BatchOperationMetadata`. (progress)\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.vision.v1p4beta1.ProductSetPurgeConfig} request.productSetPurgeConfig\n   *   Specify which ProductSet contains the Products to be deleted.\n   * @param {boolean} request.deleteOrphanProducts\n   *   If delete_orphan_products is true, all Products that are not in any\n   *   ProductSet will be deleted.\n   * @param {string} request.parent\n   *   Required. The project and location in which the Products should be deleted.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {boolean} request.force\n   *   The default value is false. Override this value to true to actually perform\n   *   the purge.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.purgeProducts(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  purgeProducts(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.purgeProducts(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `purgeProducts()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkPurgeProductsProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkPurgeProductsProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.purgeProducts, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Lists ProductSets in an unspecified order.\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if page_size is greater than 100, or less\n   *   than 1.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project from which ProductSets should be listed.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listProductSetsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProductSets(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listProductSets(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project from which ProductSets should be listed.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listProductSetsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProductSetsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProductSets.createStream(this.innerApiCalls.listProductSets, request, callSettings);\n  }\n  /**\n   * Equivalent to `listProductSets`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project from which ProductSets should be listed.\n   *\n   *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listProductSetsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listProductSetsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProductSets.asyncIterate(this.innerApiCalls['listProductSets'], request, callSettings);\n  }\n  /**\n   * Lists products in an unspecified order.\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project OR ProductSet from which Products should be listed.\n   *\n   *   Format:\n   *   `projects/PROJECT_ID/locations/LOC_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listProductsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProducts(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listProducts(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project OR ProductSet from which Products should be listed.\n   *\n   *   Format:\n   *   `projects/PROJECT_ID/locations/LOC_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listProductsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProductsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProducts.createStream(this.innerApiCalls.listProducts, request, callSettings);\n  }\n  /**\n   * Equivalent to `listProducts`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project OR ProductSet from which Products should be listed.\n   *\n   *   Format:\n   *   `projects/PROJECT_ID/locations/LOC_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Product]{@link google.cloud.vision.v1p4beta1.Product}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listProductsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listProductsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProducts.asyncIterate(this.innerApiCalls['listProducts'], request, callSettings);\n  }\n  /**\n   * Lists reference images.\n   *\n   * Possible errors:\n   *\n   * * Returns NOT_FOUND if the parent product does not exist.\n   * * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less\n   *   than 1.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Resource name of the product containing the reference images.\n   *\n   *   Format is\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   A token identifying a page of results to be returned. This is the value\n   *   of `nextPageToken` returned in a previous reference image list request.\n   *\n   *   Defaults to the first page if not specified.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listReferenceImagesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listReferenceImages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listReferenceImages(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Resource name of the product containing the reference images.\n   *\n   *   Format is\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   A token identifying a page of results to be returned. This is the value\n   *   of `nextPageToken` returned in a previous reference image list request.\n   *\n   *   Defaults to the first page if not specified.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listReferenceImagesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listReferenceImagesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listReferenceImages.createStream(this.innerApiCalls.listReferenceImages, request, callSettings);\n  }\n  /**\n   * Equivalent to `listReferenceImages`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Resource name of the product containing the reference images.\n   *\n   *   Format is\n   *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   A token identifying a page of results to be returned. This is the value\n   *   of `nextPageToken` returned in a previous reference image list request.\n   *\n   *   Defaults to the first page if not specified.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listReferenceImagesAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listReferenceImagesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listReferenceImages.asyncIterate(this.innerApiCalls['listReferenceImages'], request, callSettings);\n  }\n  /**\n   * Lists the Products in a ProductSet, in an unspecified order. If the\n   * ProductSet does not exist, the products field of the response will be\n   * empty.\n   *\n   * Possible errors:\n   *\n   * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The ProductSet resource for which to retrieve Products.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listProductsInProductSetAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProductsInProductSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listProductsInProductSet(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The ProductSet resource for which to retrieve Products.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listProductsInProductSetAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listProductsInProductSetStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProductsInProductSet.createStream(this.innerApiCalls.listProductsInProductSet, request, callSettings);\n  }\n  /**\n   * Equivalent to `listProductsInProductSet`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The ProductSet resource for which to retrieve Products.\n   *\n   *   Format is:\n   *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n   * @param {number} request.pageSize\n   *   The maximum number of items to return. Default 10, maximum 100.\n   * @param {string} request.pageToken\n   *   The next_page_token returned from a previous List request, if any.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Product]{@link google.cloud.vision.v1p4beta1.Product}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listProductsInProductSetAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listProductsInProductSetAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listProductsInProductSet.asyncIterate(this.innerApiCalls['listProductsInProductSet'], request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n\n\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Return a fully-qualified product resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product\n   * @returns {string} Resource name string.\n   */\n\n\n  productPath(project, location, product) {\n    return this.pathTemplates.productPathTemplate.render({\n      project: project,\n      location: location,\n      product: product\n    });\n  }\n  /**\n   * Parse the project from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).project;\n  }\n  /**\n   * Parse the location from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).location;\n  }\n  /**\n   * Parse the product from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the product.\n   */\n\n\n  matchProductFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).product;\n  }\n  /**\n   * Return a fully-qualified productSet resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product_set\n   * @returns {string} Resource name string.\n   */\n\n\n  productSetPath(project, location, productSet) {\n    return this.pathTemplates.productSetPathTemplate.render({\n      project: project,\n      location: location,\n      product_set: productSet\n    });\n  }\n  /**\n   * Parse the project from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).project;\n  }\n  /**\n   * Parse the location from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).location;\n  }\n  /**\n   * Parse the product_set from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the product_set.\n   */\n\n\n  matchProductSetFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).product_set;\n  }\n  /**\n   * Return a fully-qualified referenceImage resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product\n   * @param {string} reference_image\n   * @returns {string} Resource name string.\n   */\n\n\n  referenceImagePath(project, location, product, referenceImage) {\n    return this.pathTemplates.referenceImagePathTemplate.render({\n      project: project,\n      location: location,\n      product: product,\n      reference_image: referenceImage\n    });\n  }\n  /**\n   * Parse the project from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).project;\n  }\n  /**\n   * Parse the location from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).location;\n  }\n  /**\n   * Parse the product from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the product.\n   */\n\n\n  matchProductFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).product;\n  }\n  /**\n   * Parse the reference_image from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the reference_image.\n   */\n\n\n  matchReferenceImageFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).reference_image;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.productSearchStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.ProductSearchClient = ProductSearchClient;","map":{"version":3,"sources":["../../../src/v1p4beta1/product_search_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProductSearchClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p4beta1/product_search_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./product_search_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Manages Products and ProductSets of reference images for use in product\n *  search. It uses the following resource model:\n *\n *  - The API has a collection of\n *  {@link google.cloud.vision.v1p4beta1.ProductSet|ProductSet} resources, named\n *  `projects/* /locations/* /productSets/*`, which acts as a way to put different\n *  products into groups to limit identification.\n *\n *  In parallel,\n *\n *  - The API has a collection of\n *  {@link google.cloud.vision.v1p4beta1.Product|Product} resources, named\n *    `projects/* /locations/* /products/*`\n *\n *  - Each {@link google.cloud.vision.v1p4beta1.Product|Product} has a collection of\n *  {@link google.cloud.vision.v1p4beta1.ReferenceImage|ReferenceImage} resources,\n *  named\n *    `projects/* /locations/* /products/* /referenceImages/*`\n * @class\n * @memberof v1p4beta1\n */\nclass ProductSearchClient {\n    /**\n     * Construct an instance of ProductSearchClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n            productPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}'),\n            productSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/productSets/{product_set}'),\n            referenceImagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listProductSets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'productSets'),\n            listProducts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products'),\n            listReferenceImages: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'referenceImages'),\n            listProductsInProductSet: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products'),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const importProductSetsResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.ImportProductSetsResponse');\n        const importProductSetsMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.BatchOperationMetadata');\n        const purgeProductsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const purgeProductsMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p4beta1.BatchOperationMetadata');\n        this.descriptors.longrunning = {\n            importProductSets: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importProductSetsResponse.decode.bind(importProductSetsResponse), importProductSetsMetadata.decode.bind(importProductSetsMetadata)),\n            purgeProducts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, purgeProductsResponse.decode.bind(purgeProductsResponse), purgeProductsMetadata.decode.bind(purgeProductsMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p4beta1.ProductSearch', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.productSearchStub) {\n            return this.productSearchStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.vision.v1p4beta1.ProductSearch.\n        this.productSearchStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.vision.v1p4beta1.ProductSearch')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.vision.v1p4beta1.ProductSearch, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const productSearchStubMethods = [\n            'createProductSet',\n            'listProductSets',\n            'getProductSet',\n            'updateProductSet',\n            'deleteProductSet',\n            'createProduct',\n            'listProducts',\n            'getProduct',\n            'updateProduct',\n            'deleteProduct',\n            'createReferenceImage',\n            'deleteReferenceImage',\n            'listReferenceImages',\n            'getReferenceImage',\n            'addProductToProductSet',\n            'removeProductFromProductSet',\n            'listProductsInProductSet',\n            'importProductSets',\n            'purgeProducts',\n        ];\n        for (const methodName of productSearchStubMethods) {\n            const callPromise = this.productSearchStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.productSearchStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-vision',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Creates and returns a new ProductSet resource.\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if display_name is missing, or is longer than\n     *   4096 characters.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project in which the ProductSet should be created.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet\n     *   Required. The ProductSet to create.\n     * @param {string} request.productSetId\n     *   A user-supplied resource id for this ProductSet. If set, the server will\n     *   attempt to use this value as the resource id. If it is already in use, an\n     *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters\n     *   long. It cannot contain the character `/`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createProductSet(request);\n     */\n    createProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createProductSet(request, options, callback);\n    }\n    /**\n     * Gets information associated with a ProductSet.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the ProductSet does not exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Resource name of the ProductSet to get.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getProductSet(request);\n     */\n    getProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getProductSet(request, options, callback);\n    }\n    /**\n     * Makes changes to a ProductSet resource.\n     * Only display_name can be updated currently.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the ProductSet does not exist.\n     * * Returns INVALID_ARGUMENT if display_name is present in update_mask but\n     *   missing from the request or longer than 4096 characters.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.vision.v1p4beta1.ProductSet} request.productSet\n     *   Required. The ProductSet resource which replaces the one on the server.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields to\n     *   update.\n     *   If update_mask isn't specified, all mutable fields are to be updated.\n     *   Valid mask path is `display_name`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateProductSet(request);\n     */\n    updateProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'product_set.name': request.productSet.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateProductSet(request, options, callback);\n    }\n    /**\n     * Permanently deletes a ProductSet. Products and ReferenceImages in the\n     * ProductSet are not deleted.\n     *\n     * The actual image files are not deleted from Google Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Resource name of the ProductSet to delete.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteProductSet(request);\n     */\n    deleteProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteProductSet(request, options, callback);\n    }\n    /**\n     * Creates and returns a new product resource.\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096\n     *   characters.\n     * * Returns INVALID_ARGUMENT if description is longer than 4096 characters.\n     * * Returns INVALID_ARGUMENT if product_category is missing or invalid.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project in which the Product should be created.\n     *\n     *   Format is\n     *   `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {google.cloud.vision.v1p4beta1.Product} request.product\n     *   Required. The product to create.\n     * @param {string} request.productId\n     *   A user-supplied resource id for this Product. If set, the server will\n     *   attempt to use this value as the resource id. If it is already in use, an\n     *   error is returned with code ALREADY_EXISTS. Must be at most 128 characters\n     *   long. It cannot contain the character `/`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createProduct(request);\n     */\n    createProduct(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createProduct(request, options, callback);\n    }\n    /**\n     * Gets information associated with a Product.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the Product does not exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Resource name of the Product to get.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getProduct(request);\n     */\n    getProduct(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getProduct(request, options, callback);\n    }\n    /**\n     * Makes changes to a Product resource.\n     * Only the `display_name`, `description`, and `labels` fields can be updated\n     * right now.\n     *\n     * If labels are updated, the change will not be reflected in queries until\n     * the next index time.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the Product does not exist.\n     * * Returns INVALID_ARGUMENT if display_name is present in update_mask but is\n     *   missing from the request or longer than 4096 characters.\n     * * Returns INVALID_ARGUMENT if description is present in update_mask but is\n     *   longer than 4096 characters.\n     * * Returns INVALID_ARGUMENT if product_category is present in update_mask.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.vision.v1p4beta1.Product} request.product\n     *   Required. The Product resource which replaces the one on the server.\n     *   product.name is immutable.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   The {@link google.protobuf.FieldMask|FieldMask} that specifies which fields\n     *   to update.\n     *   If update_mask isn't specified, all mutable fields are to be updated.\n     *   Valid mask paths include `product_labels`, `display_name`, and\n     *   `description`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateProduct(request);\n     */\n    updateProduct(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'product.name': request.product.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateProduct(request, options, callback);\n    }\n    /**\n     * Permanently deletes a product and its reference images.\n     *\n     * Metadata of the product and all its images will be deleted right away, but\n     * search queries against ProductSets containing the product may still work\n     * until all related caches are refreshed.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Resource name of product to delete.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteProduct(request);\n     */\n    deleteProduct(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteProduct(request, options, callback);\n    }\n    /**\n     * Creates and returns a new ReferenceImage resource.\n     *\n     * The `bounding_poly` field is optional. If `bounding_poly` is not specified,\n     * the system will try to detect regions of interest in the image that are\n     * compatible with the product_category on the parent product. If it is\n     * specified, detection is ALWAYS skipped. The system converts polygons into\n     * non-rotated rectangles.\n     *\n     * Note that the pipeline will resize the image if the image resolution is too\n     * large to process (above 50MP).\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096\n     *   characters.\n     * * Returns INVALID_ARGUMENT if the product does not exist.\n     * * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing\n     *   compatible with the parent product's product_category is detected.\n     * * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Resource name of the product in which to create the reference\n     *   image.\n     *\n     *   Format is\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n     * @param {google.cloud.vision.v1p4beta1.ReferenceImage} request.referenceImage\n     *   Required. The reference image to create.\n     *   If an image ID is specified, it is ignored.\n     * @param {string} request.referenceImageId\n     *   A user-supplied resource id for the ReferenceImage to be added. If set,\n     *   the server will attempt to use this value as the resource id. If it is\n     *   already in use, an error is returned with code ALREADY_EXISTS. Must be at\n     *   most 128 characters long. It cannot contain the character `/`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createReferenceImage(request);\n     */\n    createReferenceImage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createReferenceImage(request, options, callback);\n    }\n    /**\n     * Permanently deletes a reference image.\n     *\n     * The image metadata will be deleted right away, but search queries\n     * against ProductSets containing the image may still work until all related\n     * caches are refreshed.\n     *\n     * The actual image files are not deleted from Google Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the reference image to delete.\n     *\n     *   Format is:\n     *\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteReferenceImage(request);\n     */\n    deleteReferenceImage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteReferenceImage(request, options, callback);\n    }\n    /**\n     * Gets information associated with a ReferenceImage.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the specified image does not exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the ReferenceImage to get.\n     *\n     *   Format is:\n     *\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getReferenceImage(request);\n     */\n    getReferenceImage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getReferenceImage(request, options, callback);\n    }\n    /**\n     * Adds a Product to the specified ProductSet. If the Product is already\n     * present, no change is made.\n     *\n     * One Product can be added to at most 100 ProductSets.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name for the ProductSet to modify.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {string} request.product\n     *   Required. The resource name for the Product to be added to this ProductSet.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.addProductToProductSet(request);\n     */\n    addProductToProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.addProductToProductSet(request, options, callback);\n    }\n    /**\n     * Removes a Product from the specified ProductSet.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name for the ProductSet to modify.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {string} request.product\n     *   Required. The resource name for the Product to be removed from this\n     *   ProductSet.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.removeProductFromProductSet(request);\n     */\n    removeProductFromProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.removeProductFromProductSet(request, options, callback);\n    }\n    /**\n     * Asynchronous API that imports a list of reference images to specified\n     * product sets based on a list of image information.\n     *\n     * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be\n     * used to keep track of the progress and results of the request.\n     * `Operation.metadata` contains `BatchOperationMetadata`. (progress)\n     * `Operation.response` contains `ImportProductSetsResponse`. (results)\n     *\n     * The input source of this method is a csv file on Google Cloud Storage.\n     * For the format of the csv file please see\n     * {@link google.cloud.vision.v1p4beta1.ImportProductSetsGcsSource.csv_file_uri|ImportProductSetsGcsSource.csv_file_uri}.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project in which the ProductSets should be imported.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {google.cloud.vision.v1p4beta1.ImportProductSetsInputConfig} request.inputConfig\n     *   Required. The input content for the list of requests.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.importProductSets(request);\n     * const [response] = await operation.promise();\n     */\n    importProductSets(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.importProductSets(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `importProductSets()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkImportProductSetsProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkImportProductSetsProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importProductSets, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Asynchronous API to delete all Products in a ProductSet or all Products\n     * that are in no ProductSet.\n     *\n     * If a Product is a member of the specified ProductSet in addition to other\n     * ProductSets, the Product will still be deleted.\n     *\n     * It is recommended to not delete the specified ProductSet until after this\n     * operation has completed. It is also recommended to not add any of the\n     * Products involved in the batch delete to a new ProductSet while this\n     * operation is running because those Products may still end up deleted.\n     *\n     * It's not possible to undo the PurgeProducts operation. Therefore, it is\n     * recommended to keep the csv files used in ImportProductSets (if that was\n     * how you originally built the Product Set) before starting PurgeProducts, in\n     * case you need to re-import the data after deletion.\n     *\n     * If the plan is to purge all of the Products from a ProductSet and then\n     * re-use the empty ProductSet to re-import new Products into the empty\n     * ProductSet, you must wait until the PurgeProducts operation has finished\n     * for that ProductSet.\n     *\n     * The {@link google.longrunning.Operation|google.longrunning.Operation} API can be\n     * used to keep track of the progress and results of the request.\n     * `Operation.metadata` contains `BatchOperationMetadata`. (progress)\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.vision.v1p4beta1.ProductSetPurgeConfig} request.productSetPurgeConfig\n     *   Specify which ProductSet contains the Products to be deleted.\n     * @param {boolean} request.deleteOrphanProducts\n     *   If delete_orphan_products is true, all Products that are not in any\n     *   ProductSet will be deleted.\n     * @param {string} request.parent\n     *   Required. The project and location in which the Products should be deleted.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {boolean} request.force\n     *   The default value is false. Override this value to true to actually perform\n     *   the purge.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.purgeProducts(request);\n     * const [response] = await operation.promise();\n     */\n    purgeProducts(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.purgeProducts(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `purgeProducts()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkPurgeProductsProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkPurgeProductsProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.purgeProducts, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Lists ProductSets in an unspecified order.\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if page_size is greater than 100, or less\n     *   than 1.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project from which ProductSets should be listed.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listProductSetsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProductSets(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listProductSets(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project from which ProductSets should be listed.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listProductSetsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProductSetsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProductSets.createStream(this.innerApiCalls.listProductSets, request, callSettings);\n    }\n    /**\n     * Equivalent to `listProductSets`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project from which ProductSets should be listed.\n     *\n     *   Format is `projects/PROJECT_ID/locations/LOC_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [ProductSet]{@link google.cloud.vision.v1p4beta1.ProductSet}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listProductSetsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listProductSetsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProductSets.asyncIterate(this.innerApiCalls['listProductSets'], request, callSettings);\n    }\n    /**\n     * Lists products in an unspecified order.\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project OR ProductSet from which Products should be listed.\n     *\n     *   Format:\n     *   `projects/PROJECT_ID/locations/LOC_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listProductsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProducts(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listProducts(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project OR ProductSet from which Products should be listed.\n     *\n     *   Format:\n     *   `projects/PROJECT_ID/locations/LOC_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listProductsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProductsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProducts.createStream(this.innerApiCalls.listProducts, request, callSettings);\n    }\n    /**\n     * Equivalent to `listProducts`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project OR ProductSet from which Products should be listed.\n     *\n     *   Format:\n     *   `projects/PROJECT_ID/locations/LOC_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Product]{@link google.cloud.vision.v1p4beta1.Product}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listProductsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listProductsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProducts.asyncIterate(this.innerApiCalls['listProducts'], request, callSettings);\n    }\n    /**\n     * Lists reference images.\n     *\n     * Possible errors:\n     *\n     * * Returns NOT_FOUND if the parent product does not exist.\n     * * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less\n     *   than 1.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Resource name of the product containing the reference images.\n     *\n     *   Format is\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   A token identifying a page of results to be returned. This is the value\n     *   of `nextPageToken` returned in a previous reference image list request.\n     *\n     *   Defaults to the first page if not specified.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listReferenceImagesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listReferenceImages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listReferenceImages(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Resource name of the product containing the reference images.\n     *\n     *   Format is\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   A token identifying a page of results to be returned. This is the value\n     *   of `nextPageToken` returned in a previous reference image list request.\n     *\n     *   Defaults to the first page if not specified.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listReferenceImagesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listReferenceImagesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listReferenceImages.createStream(this.innerApiCalls.listReferenceImages, request, callSettings);\n    }\n    /**\n     * Equivalent to `listReferenceImages`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Resource name of the product containing the reference images.\n     *\n     *   Format is\n     *   `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   A token identifying a page of results to be returned. This is the value\n     *   of `nextPageToken` returned in a previous reference image list request.\n     *\n     *   Defaults to the first page if not specified.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [ReferenceImage]{@link google.cloud.vision.v1p4beta1.ReferenceImage}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listReferenceImagesAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listReferenceImagesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listReferenceImages.asyncIterate(this.innerApiCalls['listReferenceImages'], request, callSettings);\n    }\n    /**\n     * Lists the Products in a ProductSet, in an unspecified order. If the\n     * ProductSet does not exist, the products field of the response will be\n     * empty.\n     *\n     * Possible errors:\n     *\n     * * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The ProductSet resource for which to retrieve Products.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Product]{@link google.cloud.vision.v1p4beta1.Product}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listProductsInProductSetAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProductsInProductSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listProductsInProductSet(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The ProductSet resource for which to retrieve Products.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Product]{@link google.cloud.vision.v1p4beta1.Product} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listProductsInProductSetAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listProductsInProductSetStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProductsInProductSet.createStream(this.innerApiCalls.listProductsInProductSet, request, callSettings);\n    }\n    /**\n     * Equivalent to `listProductsInProductSet`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The ProductSet resource for which to retrieve Products.\n     *\n     *   Format is:\n     *   `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`\n     * @param {number} request.pageSize\n     *   The maximum number of items to return. Default 10, maximum 100.\n     * @param {string} request.pageToken\n     *   The next_page_token returned from a previous List request, if any.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Product]{@link google.cloud.vision.v1p4beta1.Product}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listProductsInProductSetAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listProductsInProductSetAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listProductsInProductSet.asyncIterate(this.innerApiCalls['listProductsInProductSet'], request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Return a fully-qualified product resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product\n     * @returns {string} Resource name string.\n     */\n    productPath(project, location, product) {\n        return this.pathTemplates.productPathTemplate.render({\n            project: project,\n            location: location,\n            product: product,\n        });\n    }\n    /**\n     * Parse the project from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).project;\n    }\n    /**\n     * Parse the location from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).location;\n    }\n    /**\n     * Parse the product from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the product.\n     */\n    matchProductFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).product;\n    }\n    /**\n     * Return a fully-qualified productSet resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product_set\n     * @returns {string} Resource name string.\n     */\n    productSetPath(project, location, productSet) {\n        return this.pathTemplates.productSetPathTemplate.render({\n            project: project,\n            location: location,\n            product_set: productSet,\n        });\n    }\n    /**\n     * Parse the project from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .project;\n    }\n    /**\n     * Parse the location from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .location;\n    }\n    /**\n     * Parse the product_set from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the product_set.\n     */\n    matchProductSetFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .product_set;\n    }\n    /**\n     * Return a fully-qualified referenceImage resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product\n     * @param {string} reference_image\n     * @returns {string} Resource name string.\n     */\n    referenceImagePath(project, location, product, referenceImage) {\n        return this.pathTemplates.referenceImagePathTemplate.render({\n            project: project,\n            location: location,\n            product: product,\n            reference_image: referenceImage,\n        });\n    }\n    /**\n     * Parse the project from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).project;\n    }\n    /**\n     * Parse the location from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).location;\n    }\n    /**\n     * Parse the product from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the product.\n     */\n    matchProductFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).product;\n    }\n    /**\n     * Parse the reference_image from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the reference_image.\n     */\n    matchReferenceImageFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).reference_image;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.productSearchStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.ProductSearchClient = ProductSearchClient;\n//# sourceMappingURL=product_search_client.js.map"]},"metadata":{},"sourceType":"script"}