{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageAnnotatorClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p2beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p2beta1\n */\n\n\nclass ImageAnnotatorClient {\n  /**\n   * Construct an instance of ImageAnnotatorClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const asyncBatchAnnotateFilesResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p2beta1.AsyncBatchAnnotateFilesResponse');\n    const asyncBatchAnnotateFilesMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p2beta1.OperationMetadata');\n    this.descriptors.longrunning = {\n      asyncBatchAnnotateFiles: new this._gaxModule.LongrunningDescriptor(this.operationsClient, asyncBatchAnnotateFilesResponse.decode.bind(asyncBatchAnnotateFilesResponse), asyncBatchAnnotateFilesMetadata.decode.bind(asyncBatchAnnotateFilesMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p2beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.imageAnnotatorStub) {\n      return this.imageAnnotatorStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.vision.v1p2beta1.ImageAnnotator.\n\n\n    this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.vision.v1p2beta1.ImageAnnotator') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.vision.v1p2beta1.ImageAnnotator, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const imageAnnotatorStubMethods = ['batchAnnotateImages', 'asyncBatchAnnotateFiles'];\n\n    for (const methodName of imageAnnotatorStubMethods) {\n      const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.imageAnnotatorStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-vision'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Run image detection and annotation for a batch of images.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {number[]} request.requests\n   *   Required. Individual image annotation requests for this batch.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [BatchAnnotateImagesResponse]{@link google.cloud.vision.v1p2beta1.BatchAnnotateImagesResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.batchAnnotateImages(request);\n   */\n\n\n  batchAnnotateImages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n  }\n  /**\n   * Run async image detection and annotation for a list of generic files (e.g.\n   * PDF) which may contain multiple pages and multiple images per page.\n   * Progress and results can be retrieved through the\n   * `google.longrunning.Operations` interface.\n   * `Operation.metadata` contains `OperationMetadata` (metadata).\n   * `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {number[]} request.requests\n   *   Required. Individual async file annotation requests for this batch.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.asyncBatchAnnotateFiles(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  asyncBatchAnnotateFiles(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.asyncBatchAnnotateFiles(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `asyncBatchAnnotateFiles()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkAsyncBatchAnnotateFilesProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkAsyncBatchAnnotateFilesProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.asyncBatchAnnotateFiles, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.imageAnnotatorStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.ImageAnnotatorClient = ImageAnnotatorClient;","map":{"version":3,"sources":["../../../src/v1p2beta1/image_annotator_client.ts"],"names":[],"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;;AACA,MAAA,GAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAQA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;AAGA;;;;AAIG;;;AACH,MAAA,WAAA,GAAA,OAAA,CAAA,sCAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,uBAAD,CAAP,CAAiC,OAAjD;AAEA;;;;;;AAMG;;;AACH,MAAa,oBAAb,CAAiC;AAkB/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;AACH,EAAA,WAAA,CAAY,IAAZ,EAAgC;;;AAnDxB,SAAA,WAAA,GAAc,KAAd;AAOR,SAAA,WAAA,GAA2B;AACzB,MAAA,IAAI,EAAE,EADmB;AAEzB,MAAA,MAAM,EAAE,EAFiB;AAGzB,MAAA,WAAW,EAAE,EAHY;AAIzB,MAAA,QAAQ,EAAE;AAJe,KAA3B,CA4CgC,CAC9B;;AACA,UAAM,aAAa,GAAG,KAAK,WAA3B;AACA,UAAM,WAAW,GACf,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,WAAN,MAAqB,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,WAA3B,KAA0C,aAAa,CAAC,WAD1D;AAEA,UAAM,IAAI,GAAG,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,IAAN,KAAc,aAAa,CAAC,IAAzC;AACA,UAAM,YAAY,GAAA,CAAA,EAAA,GAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,YAAT,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,EAA3C;AACA,UAAM,QAAQ,GAAA,CAAA,EAAA,GACZ,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,QADM,MACE,IADF,IACE,EAAA,KAAA,KAAA,CADF,GACE,EADF,GAEX,OAAO,MAAP,KAAkB,WAAlB,IAAiC,QAAO,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,KAAf,MAAyB,UAF7D;AAGA,IAAA,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc;AAAC,MAAA,WAAD;AAAc,MAAA,IAAd;AAAoB,MAAA,YAApB;AAAkC,MAAA;AAAlC,KAAd,EAA2D,IAA3D,CAAP,CAV8B,CAY9B;;AACA,QAAI,WAAW,KAAK,aAAa,CAAC,WAA9B,IAA6C,EAAE,YAAY,IAAd,CAAjD,EAAsE;AACpE,MAAA,IAAI,CAAC,QAAD,CAAJ,GAAiB,aAAa,CAAC,MAA/B;AACD,KAf6B,CAiB9B;;;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,QAAL,GAAgB,GAAG,CAAC,QAApB,GAA+B,GAAjD,CAlB8B,CAoB9B;;AACA,SAAK,QAAL,GAAgB,IAAI,KAAK,UAAL,CAAgB,UAApB,CAA+B,IAA/B,CAAhB,CArB8B,CAuB9B;;AACA,SAAK,KAAL,GAAa,IAAb,CAxB8B,CA0B9B;;AACA,SAAK,IAAL,GAAY,KAAK,QAAL,CAAc,IAA1B,CA3B8B,CA6B9B;;AACA,QAAI,WAAW,KAAK,aAAa,CAAC,WAAlC,EAA+C;AAC7C,WAAK,IAAL,CAAU,aAAV,GAA0B,aAAa,CAAC,MAAxC;AACD,KAhC6B,CAkC9B;;;AACA,UAAM,YAAY,GAAG,CAAC,OAAO,KAAK,UAAL,CAAgB,OAAO,EAA/B,EAAmC,SAAS,OAAO,EAAnD,CAArB;;AACA,QAAI,OAAO,OAAP,KAAmB,WAAnB,IAAkC,cAAc,OAApD,EAA6D;AAC3D,MAAA,YAAY,CAAC,IAAb,CAAkB,WAAW,OAAO,CAAC,QAAR,CAAiB,IAAI,EAAlD;AACD,KAFD,MAEO;AACL,MAAA,YAAY,CAAC,IAAb,CAAkB,UAAU,KAAK,UAAL,CAAgB,OAAO,EAAnD;AACD;;AACD,QAAI,CAAC,IAAI,CAAC,QAAV,EAAoB;AAClB,MAAA,YAAY,CAAC,IAAb,CAAkB,QAAQ,KAAK,QAAL,CAAc,WAAW,EAAnD;AACD;;AACD,QAAI,IAAI,CAAC,OAAL,IAAgB,IAAI,CAAC,UAAzB,EAAqC;AACnC,MAAA,YAAY,CAAC,IAAb,CAAkB,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,EAApD;AACD,KA9C6B,CA+C9B;AACA;AACA;;;AAEA,UAAM,eAAe,GAAG,IAAI,CAAC,IAAL,CACtB,SADsB,EAEtB,IAFsB,EAGtB,IAHsB,EAItB,QAJsB,EAKtB,aALsB,CAAxB;AAOA,SAAK,OAAL,GAAe,KAAK,QAAL,CAAc,SAAd,CACb,IAAI,CAAC,QAAL,GACI;AACA,IAAA,OAAO,CAAC,0BAAD,CAFX,GAGI,eAJS,CAAf,CA1D8B,CAiE9B;AACA;AACA;;AACA,UAAM,cAAc,GAAG,IAAI,CAAC,QAAL,GACnB,KAAK,UAAL,CAAgB,QAAhB,CAAyB,IAAzB,CAA8B,QAA9B,EACE;AACA,IAAA,OAAO,CAAC,0BAAD,CAFT,CADmB,GAKnB,KAAK,UAAL,CAAgB,QAAhB,CAAyB,QAAzB,CAAkC,eAAlC,CALJ;AAOA,SAAK,gBAAL,GAAwB,KAAK,UAAL,CACrB,GADqB,CACjB;AACH,MAAA,IAAI,EAAE,KAAK,IADR;AAEH,MAAA,IAAI,EAAE,UAAU,KAAK,QAAf,GAA0B,KAAK,QAAL,CAAc,IAAxC,GAA+C;AAFlD,KADiB,EAKrB,gBALqB,CAKJ,IALI,CAAxB;AAMA,UAAM,+BAA+B,GAAG,cAAc,CAAC,MAAf,CACtC,gEADsC,CAAxC;AAGA,UAAM,+BAA+B,GAAG,cAAc,CAAC,MAAf,CACtC,kDADsC,CAAxC;AAIA,SAAK,WAAL,CAAiB,WAAjB,GAA+B;AAC7B,MAAA,uBAAuB,EAAE,IAAI,KAAK,UAAL,CAAgB,qBAApB,CACvB,KAAK,gBADkB,EAEvB,+BAA+B,CAAC,MAAhC,CAAuC,IAAvC,CACE,+BADF,CAFuB,EAKvB,+BAA+B,CAAC,MAAhC,CAAuC,IAAvC,CACE,+BADF,CALuB;AADI,KAA/B,CAxF8B,CAoG9B;;AACA,SAAK,SAAL,GAAiB,KAAK,QAAL,CAAc,iBAAd,CACf,8CADe,EAEf,WAFe,EAGf,IAAI,CAAC,YAAL,IAAqB,EAHN,EAIf;AAAC,2BAAqB,YAAY,CAAC,IAAb,CAAkB,GAAlB;AAAtB,KAJe,CAAjB,CArG8B,CA4G9B;AACA;AACA;;AACA,SAAK,aAAL,GAAqB,EAArB;AACD;AAED;;;;;;;;;;AAUG;;;AACH,EAAA,UAAU,GAAA;AACR;AACA,QAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAO,KAAK,kBAAZ;AACD,KAJO,CAMR;AACA;;;AACA,SAAK,kBAAL,GAA0B,KAAK,QAAL,CAAc,UAAd,CACxB,KAAK,KAAL,CAAW,QAAX,GACK,KAAK,OAAL,CAA+B,aAA/B,CACC,8CADD,CADL,GAII;AACC,SAAK,OAAL,CAAqB,MAArB,CAA4B,KAA5B,CAAkC,MAAlC,CAAyC,SAAzC,CAAmD,cANhC,EAOxB,KAAK,KAPmB,CAA1B,CARQ,CAkBR;AACA;;AACA,UAAM,yBAAyB,GAAG,CAChC,qBADgC,EAEhC,yBAFgC,CAAlC;;AAIA,SAAK,MAAM,UAAX,IAAyB,yBAAzB,EAAoD;AAClD,YAAM,WAAW,GAAG,KAAK,kBAAL,CAAwB,IAAxB,CAClB,IAAI,IAAI,CAAC,GAAG,IAAJ,KAAuB;AAC7B,YAAI,KAAK,WAAT,EAAsB;AACpB,iBAAO,OAAO,CAAC,MAAR,CAAe,qCAAf,CAAP;AACD;;AACD,cAAM,IAAI,GAAG,IAAI,CAAC,UAAD,CAAjB;AACA,eAAO,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAP;AACD,OAPiB,EAQjB,GAAD,IAAmC,MAAK;AACtC,cAAM,GAAN;AACD,OAViB,CAApB;AAaA,YAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,WAAjB,CAA6B,UAA7B,KAA4C,SAA/D;;AACA,YAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,aAAhB,CACd,WADc,EAEd,KAAK,SAAL,CAAe,UAAf,CAFc,EAGd,UAHc,CAAhB;;AAMA,WAAK,aAAL,CAAmB,UAAnB,IAAiC,OAAjC;AACD;;AAED,WAAO,KAAK,kBAAZ;AACD;AAED;;;AAGG;;;AACmB,aAAX,WAAW,GAAA;AACpB,WAAO,uBAAP;AACD;AAED;;;;AAIG;;;AACmB,aAAX,WAAW,GAAA;AACpB,WAAO,uBAAP;AACD;AAED;;;AAGG;;;AACY,aAAJ,IAAI,GAAA;AACb,WAAO,GAAP;AACD;AAED;;;;AAIG;;;AACc,aAAN,MAAM,GAAA;AACf,WAAO,CACL,gDADK,EAEL,8CAFK,CAAP;AAID;AAID;;;AAGG;;;AACH,EAAA,YAAY,CACV,QADU,EACuC;AAEjD,QAAI,QAAJ,EAAc;AACZ,WAAK,IAAL,CAAU,YAAV,CAAuB,QAAvB;AACA;AACD;;AACD,WAAO,KAAK,IAAL,CAAU,YAAV,EAAP;AACD;AAuCD;;;;;;;;;;;;;;;;AAgBG;;;AACH,EAAA,mBAAmB,CACjB,OADiB,EAEjB,iBAFiB,EAWjB,QAXiB,EAiBhB;AAWD,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,QAAI,OAAJ;;AACA,QAAI,OAAO,iBAAP,KAA6B,UAA7B,IAA2C,QAAQ,KAAK,SAA5D,EAAuE;AACrE,MAAA,QAAQ,GAAG,iBAAX;AACA,MAAA,OAAO,GAAG,EAAV;AACD,KAHD,MAGO;AACL,MAAA,OAAO,GAAG,iBAAV;AACD;;AACD,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,SAAK,UAAL;AACA,WAAO,KAAK,aAAL,CAAmB,mBAAnB,CAAuC,OAAvC,EAAgD,OAAhD,EAAyD,QAAzD,CAAP;AACD;AAsCD;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;;;AACH,EAAA,uBAAuB,CACrB,OADqB,EAErB,iBAFqB,EAYrB,QAZqB,EAmBpB;AAWD,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,QAAI,OAAJ;;AACA,QAAI,OAAO,iBAAP,KAA6B,UAA7B,IAA2C,QAAQ,KAAK,SAA5D,EAAuE;AACrE,MAAA,QAAQ,GAAG,iBAAX;AACA,MAAA,OAAO,GAAG,EAAV;AACD,KAHD,MAGO;AACL,MAAA,OAAO,GAAG,iBAAV;AACD;;AACD,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,SAAK,UAAL;AACA,WAAO,KAAK,aAAL,CAAmB,uBAAnB,CACL,OADK,EAEL,OAFK,EAGL,QAHK,CAAP;AAKD;AACD;;;;;;;;;;;;;;AAcG;;;AACuC,QAApC,oCAAoC,CACxC,IADwC,EAC5B;AAOZ,UAAM,OAAO,GAAG,IAAI,YAAA,CAAA,gBAAA,CAAiB,MAAjB,CAAwB,WAAxB,CAAoC,mBAAxC,CACd;AAAC,MAAA;AAAD,KADc,CAAhB;AAGA,UAAM,CAAC,SAAD,IAAc,MAAM,KAAK,gBAAL,CAAsB,YAAtB,CAAmC,OAAnC,CAA1B;AACA,UAAM,eAAe,GAAG,IAAI,GAAG,CAAC,SAAR,CACtB,SADsB,EAEtB,KAAK,WAAL,CAAiB,WAAjB,CAA6B,uBAFP,EAGtB,GAAG,CAAC,4BAAJ,EAHsB,CAAxB;AAKA,WAAO,eAAP;AAID;AAED;;;;;AAKG;;;AACH,EAAA,KAAK,GAAA;AACH,SAAK,UAAL;;AACA,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,aAAO,KAAK,kBAAL,CAAyB,IAAzB,CAA8B,IAAI,IAAG;AAC1C,aAAK,WAAL,GAAmB,IAAnB;AACA,QAAA,IAAI,CAAC,KAAL;AACD,OAHM,CAAP;AAID;;AACD,WAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AAxhB8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageAnnotatorClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p2beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p2beta1\n */\nclass ImageAnnotatorClient {\n    /**\n     * Construct an instance of ImageAnnotatorClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const asyncBatchAnnotateFilesResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p2beta1.AsyncBatchAnnotateFilesResponse');\n        const asyncBatchAnnotateFilesMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p2beta1.OperationMetadata');\n        this.descriptors.longrunning = {\n            asyncBatchAnnotateFiles: new this._gaxModule.LongrunningDescriptor(this.operationsClient, asyncBatchAnnotateFilesResponse.decode.bind(asyncBatchAnnotateFilesResponse), asyncBatchAnnotateFilesMetadata.decode.bind(asyncBatchAnnotateFilesMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p2beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.imageAnnotatorStub) {\n            return this.imageAnnotatorStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.vision.v1p2beta1.ImageAnnotator.\n        this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.vision.v1p2beta1.ImageAnnotator')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.vision.v1p2beta1.ImageAnnotator, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const imageAnnotatorStubMethods = [\n            'batchAnnotateImages',\n            'asyncBatchAnnotateFiles',\n        ];\n        for (const methodName of imageAnnotatorStubMethods) {\n            const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.longrunning[methodName] || undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.imageAnnotatorStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-vision',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Run image detection and annotation for a batch of images.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {number[]} request.requests\n     *   Required. Individual image annotation requests for this batch.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BatchAnnotateImagesResponse]{@link google.cloud.vision.v1p2beta1.BatchAnnotateImagesResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.batchAnnotateImages(request);\n     */\n    batchAnnotateImages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n    }\n    /**\n     * Run async image detection and annotation for a list of generic files (e.g.\n     * PDF) which may contain multiple pages and multiple images per page.\n     * Progress and results can be retrieved through the\n     * `google.longrunning.Operations` interface.\n     * `Operation.metadata` contains `OperationMetadata` (metadata).\n     * `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {number[]} request.requests\n     *   Required. Individual async file annotation requests for this batch.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.asyncBatchAnnotateFiles(request);\n     * const [response] = await operation.promise();\n     */\n    asyncBatchAnnotateFiles(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.asyncBatchAnnotateFiles(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `asyncBatchAnnotateFiles()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkAsyncBatchAnnotateFilesProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkAsyncBatchAnnotateFilesProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.asyncBatchAnnotateFiles, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.imageAnnotatorStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.ImageAnnotatorClient = ImageAnnotatorClient;\n//# sourceMappingURL=image_annotator_client.js.map"]},"metadata":{},"sourceType":"script"}